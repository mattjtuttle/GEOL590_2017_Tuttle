if(FALSE) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(FALSE) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(df$col1) != TRUE | is.numeric(df$col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
is.numeric(mtcars$mpg)
is.numeric(mtcars$cyl)
is.numeric(mtcars$"mpg")
is.numeric(mtcars$col1)
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(FALSE) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(df[col1]) != TRUE | is.numeric(df[col2]) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
mtcars[cyl]
mtcars[[cyl]]
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(FALSE) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(FALSE) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(FALSE) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(df[[col1]] %!in% colnames(df)) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(df[[col1]] %in% colnames(df)) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
colnames(mtcars)
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(df[[col1]] %in% colnames(df)) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
View(test1)
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %in% colnames(df)) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df)) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df)) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "x", "cyl", "added_values") #included to test the above code
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df)) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe. ")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "x", "cyl", "added_values") #included to test the above code
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe. ")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df)) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe. ")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric. ")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "x", "cyl", "added_values") #included to test the above code
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe. ")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df)) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe. ")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric. ")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe. ")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe. ")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric. ")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe. ")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe. ")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric. ")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
test2 <- column_addition(mtcars, "x", "cyl", "added_values") #included to test the above code
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe. ")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe. ")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric. ")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #included to test the above code
column_addition(mtcars, "mpg", "cyl", "added_values")
column_addition(mtcars, "mpg", "cyl", "why?")
column_addition(mtcars, "mpg", "cl", "why?")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
/tryCatch()
?tryCatch()
/stop
?stop
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(TRUE, finally = print("test error"))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(FALSE, finally = print("test error"))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(is.data.frame(df) != TRUE, error = stop("New error"))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE, error = warning("One of the specified columns is not numeric."))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE, error = warning("One of the specified columns is not numeric."))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(FALSE, error = warning("One of the specified columns is not numeric."))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(TRUE, error = warning("One of the specified columns is not numeric."))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
