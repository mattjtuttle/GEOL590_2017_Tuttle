}
test1 <- column_addition(mtcars, mtcars$mpg, mtcars$cyl, added_values)
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(col1 %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, new.col = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, mtcars$mpg, mtcars$cyl, added_values)
mpg %in% colnames(mtcars)
mtcars$mpg %in% colnames(mtcars)
colnames(mtcars)
colnames(test1)
mtcars$mpg %in% colnames(test1)
mpg %in% colnames(test1)
"mpg" %in% colnames(test1)
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(toString(col1) %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, new.col = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, mtcars$mpg, mtcars$cyl, added_values)
toString(mtcars$mpg) %in% colnames(mtcars)
toString(mtcars$mpg)
toString(mpg) %in% colnames(mtcars)
"mpg"
?as.name
as.name(mtcars$mpg)
as.name(mtcars$mpg)
col(mtcars$mpg)
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(toString(col1) %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, new.col = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, mpg, cyl, added_values)
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(toString(col1) %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, new.col = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, "mpg", "cyl", added_values)
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(toString(col1) %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, new.col = df$col1 + df$col2)
return(new_df)
}
test1 <- column_addition(mtcars, "mpg", "cyl", added_values)
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(toString(col1) %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, new.col = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, mpg, cyl, added_values)
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(toString(col1) %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, new.col = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
as.name("mpg")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(toString(col1) %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
a <- as.name(col1)
b <- as.name(col2)
new_df <- mutate(df, new.col = a + b)
return(new_df)
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(toString(col1) %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
a <- df$as.name(col1)
b <- df$as.name(col2)
new_df <- mutate(df, new.col = a + b)
return(new_df)
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(toString(col1) %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, new.col = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, mpg, cyl, "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(toString(col1) %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
a <- df$col1
b <- df$col2
new_df <- mutate(df, new.col = a + b)
return(new_df)
}
test1 <- column_addition(mtcars, mpg, cyl, "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(toString(col1) %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, new.col = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, mtcars$mpg, mtcars$cyl, "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(toString(col1) %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, new.col = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, mtcars$mpg, mtcars$cyl, "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(toString(col1) %in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, new.col = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, mtcars$mp, mtcars$cyl, "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(TRUE)
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, new.col = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, mtcars$mpg, mtcars$cyl, "added_values")
?rename
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(TRUE)
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, ~name = col1 + col2) %>%
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(TRUE)
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, ~name = col1 + col2)
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
if(TRUE)
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, name = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, mtcars$mpg, mtcars$cyl, "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))}
if(TRUE)
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, name = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, mtcars$mpg, mtcars$cyl, "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(TRUE)
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, name = col1 + col2)
return(new_df)
}
test1 <- column_addition(mtcars, mtcars$mpg, mtcars$cyl, "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(TRUE)
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, name = df[[col1]] + df[[col2]]) #Need to use "[[]]" notation in place of "$" notation since XXXXXXXXXXX
return(new_df)
}
test1 <- column_addition(mtcars, mtcars$mpg, mtcars$cyl, "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(TRUE)
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, name = df[[col1]] + df[[col2]]) #Need to use "[[]]" notation in place of "$" notation since XXXXXXXXXXX
return(new_df)
}
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
test1
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(TRUE)
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, name = df[[col1]] + df[[col2]]) #Need to use "[[]]" notation in place of "$" notation since XXXXXXXXXXX
return(new_df)
}
a <- mutate(mtcars, bad.col = "X")
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
a$bad.col
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(TRUE)
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, name = df[[col1]] + df[[col2]]) #Need to use "[[]]" notation in place of "$" notation since XXXXXXXXXXX
return(new_df)
}
a <- mutate(mtcars, bad.col = "X")
test1 <- column_addition(mtcars, "mpg", "bad.col", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(TRUE)
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, name = df[[col1]] + df[[col2]]) #Need to use "[[]]" notation in place of "$" notation since XXXXXXXXXXX
return(new_df)
}
a <- mutate(mtcars, bad.col = "X")
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
mtcars[[cyl]]
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(TRUE)
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
new_df <- mutate(df, name = df[[col1]] + df[[col2]]) #Need to use "[[]]" notation in place of "$" notation since XXXXXXXXXXX
return(new_df)
}
a <- mutate(mtcars, bad.col = "X")
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(TRUE)
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
df[[name]] <- df[[col1]] + df[[col2]] #Need to use "[[]]" notation in place of "$" notation since XXXXXXXXXXX
}
a <- mutate(mtcars, bad.col = "X")
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(TRUE) #Need to fix this
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
if(is.numeric(col1) != TRUE | is.numeric(col2) != TRUE)
warning("One of the specified columns is not numeric.")
#Adds two columns and places the output in a new column within the existing dataframe
df[[name]] <- df[[col1]] + df[[col2]] #Need to use "[[]]" notation in place of "$" notation
}
a <- mutate(mtcars, bad.col = "X")
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
