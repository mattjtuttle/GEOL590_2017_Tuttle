arrange(year) %>%
ggplot(aes(year, n)) +
geom_point()
print(my_name)
#Looks at the number of people who were born with the name Matthew from 1800 to 2014
my_name <- babynames %>%
filter(name == "Taylor") %>%
group_by(sex) %>%
arrange(year) %>%
ggplot(aes(year, n, color = sex)) +
geom_point()
print(my_name)
#Looks at the number of people who were born with the name Matthew from 1800 to 2014
my_name <- babynames %>%
filter(name == "Taylor") %>%
group_by(sex) %>%
arrange(year) %>%
ggplot(aes(year, freq, color = sex)) +
geom_point()
print(my_name)
#Looks at the number of people who were born with the name Matthew from 1800 to 2014
my_name <- babynames %>%
filter(name == "Taylor") %>%
group_by(sex) %>%
arrange(year) %>%
ggplot(aes(year, prop, color = sex)) +
geom_point()
print(my_name)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, sex)
print(unisex_names_plot)
summarise()
?summarise()
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, year)
print(unisex_names_plot)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, year) %>%
summarise(Percent.male = sum(n))
print(unisex_names_plot)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, year, sex) %>%
summarise(total.per.year = sum(n))
filter(sex == "M")
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, year, sex) %>%
summarise(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
summarise(percent.male = sum(n) / total.per.year)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, year, sex) %>%
summarise(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
summarise(percent.male = sum(n) / total.per.year)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, year, sex) %>%
summarise(total.per.year = sum(n)) %>%
filter(sex == "M")
print(unisex_names_plot)
?summarise
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, year, sex) %>%
summarise_each(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
summarise(percent.male = sum(n) / total.per.year)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, year, sex) %>%
summarise(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
summarise(percent.male = sum(n) / total.per.year)
?summarise_each
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, year, sex) %>%
summarise(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
summarise(percent.male = sum(n) / total.per.year)
library(tidyverse) #Loads the packages associated with the tidyverse
library(nycflights13) #Loads the nycflights dataset
#Calculates median wind speed of data by airport and direction for use in table and plot
median_wind_speed <- weather %>%
group_by(origin, wind_dir) %>%
select(origin, wind_dir, wind_speed) %>%
#Filters out large outlier in wind speed as well as data for which there is no wind direction specified
filter(wind_speed < 50, wind_dir != "NA", wind_dir != "0") %>%
summarise(Median.Wind.Speed = median(wind_speed, na.rm = TRUE)) %>%
rename(Wind.Direction = wind_dir, Origin = origin) %>%
print()
library(DT) #Loads the DT package which provides an R interface for the JavaScript library DataTables
#Creates a datatable of median wind speed data using the DT package
#This interactive datatable is only able to be seen when opening as an HTML file
datatable(median_wind_speed, class = "cell-border stripe", colnames = c("Airport", "Wind Direction", "Median Wind Speed (mph)"))
#Makes a plots of median wind speed as a function of wind direction by airport
wind_speed_plot <- ggplot(median_wind_speed, aes(Wind.Direction, Median.Wind.Speed, color = Median.Wind.Speed)) +
geom_point() +
facet_wrap(~Origin) +
labs(x = "Wind direction", y = "Median wind speed (mph)")
print(wind_speed_plot)
#Joins the flights and airlines datatables together so full airline names may be displayed
flights_and_airlines <- inner_join(flights, airlines, by = "carrier")
#Calculates the median distance of flights that leave from JFK by airline
median_dist_by_airline <- flights_and_airlines %>%
select(name, origin, distance) %>%
filter(origin == "JFK") %>%
group_by(name) %>%
summarise(Median.Distance = median(distance)) %>%
arrange(Median.Distance) %>%
print()
library(reshape2) #Loads the reshape2 package for transforming data format
#Calculates the number of flights that leave Newark each month by airline
num_flights_from_EWR <- flights_and_airlines %>%
select(name, origin, month) %>%
filter(origin == "EWR") %>%
group_by(month, name) %>%
summarise(Number.of.flights = length(name)) %>%
dcast(name ~ month) %>%
print()
library(babynames) #Loads the babynames dataset
#Determines the ten most common male baby names of 2014
male_names14 <- babynames %>%
filter(sex == "M", year == 2014) %>%
arrange(rev(n)) %>%
head(n = 10)
#Determines the ten most common female baby names of 2014
female_names14 <- babynames %>%
filter(sex == "F", year == 2014) %>%
arrange(rev(n)) %>%
head(n = 10)
#Joins the male and female most popular names of 2014
pop_names14 <- full_join(male_names14, female_names14)
#Plots the frequency of the ten most common male and female baby names of 2014 since 1800
top10_babyname_freq_plot <- semi_join(babynames, pop_names14, by = c("name", "sex")) %>%
ggplot(aes(year, prop, color = sex)) +
facet_wrap(~name) +
geom_point()
print(top10_babyname_freq_plot)
#Creates the table of common names as specified above
girl_names_26_29 <- babynames %>%
filter(year == c(1896, 1942, 2016)) %>%
group_by(year) %>%
arrange(rev(n)) %>%
slice(26:29) %>%
select(year, name) %>%
print()
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, year, sex) %>%
summarise(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
summarise(percent.male = sum(n) / total.per.year)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, year, sex) %>%
summarise(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
summarise(percent.male = sum(n) / total.per.year)
View(unisex_names_plot)
library(tidyverse) #Loads the packages associated with the tidyverse
library(nycflights13) #Loads the nycflights dataset
#Calculates median wind speed of data by airport and direction for use in table and plot
median_wind_speed <- weather %>%
group_by(origin, wind_dir) %>%
select(origin, wind_dir, wind_speed) %>%
#Filters out large outlier in wind speed as well as data for which there is no wind direction specified
filter(wind_speed < 50, wind_dir != "NA", wind_dir != "0") %>%
summarise(Median.Wind.Speed = median(wind_speed, na.rm = TRUE)) %>%
rename(Wind.Direction = wind_dir, Origin = origin) %>%
print()
library(DT) #Loads the DT package which provides an R interface for the JavaScript library DataTables
#Creates a datatable of median wind speed data using the DT package
#This interactive datatable is only able to be seen when opening as an HTML file
datatable(median_wind_speed, class = "cell-border stripe", colnames = c("Airport", "Wind Direction", "Median Wind Speed (mph)"))
#Makes a plots of median wind speed as a function of wind direction by airport
wind_speed_plot <- ggplot(median_wind_speed, aes(Wind.Direction, Median.Wind.Speed, color = Median.Wind.Speed)) +
geom_point() +
facet_wrap(~Origin) +
labs(x = "Wind direction", y = "Median wind speed (mph)")
print(wind_speed_plot)
#Joins the flights and airlines datatables together so full airline names may be displayed
flights_and_airlines <- inner_join(flights, airlines, by = "carrier")
#Calculates the median distance of flights that leave from JFK by airline
median_dist_by_airline <- flights_and_airlines %>%
select(name, origin, distance) %>%
filter(origin == "JFK") %>%
group_by(name) %>%
summarise(Median.Distance = median(distance)) %>%
arrange(Median.Distance) %>%
print()
library(reshape2) #Loads the reshape2 package for transforming data format
#Calculates the number of flights that leave Newark each month by airline
num_flights_from_EWR <- flights_and_airlines %>%
select(name, origin, month) %>%
filter(origin == "EWR") %>%
group_by(month, name) %>%
summarise(Number.of.flights = length(name)) %>%
dcast(name ~ month) %>%
print()
library(babynames) #Loads the babynames dataset
#Determines the ten most common male baby names of 2014
male_names14 <- babynames %>%
filter(sex == "M", year == 2014) %>%
arrange(rev(n)) %>%
head(n = 10)
#Determines the ten most common female baby names of 2014
female_names14 <- babynames %>%
filter(sex == "F", year == 2014) %>%
arrange(rev(n)) %>%
head(n = 10)
#Joins the male and female most popular names of 2014
pop_names14 <- full_join(male_names14, female_names14)
#Plots the frequency of the ten most common male and female baby names of 2014 since 1800
top10_babyname_freq_plot <- semi_join(babynames, pop_names14, by = c("name", "sex")) %>%
ggplot(aes(year, prop, color = sex)) +
facet_wrap(~name) +
geom_point()
print(top10_babyname_freq_plot)
#Creates the table of common names as specified above
girl_names_26_29 <- babynames %>%
filter(year == c(1896, 1942, 2016)) %>%
group_by(year) %>%
arrange(rev(n)) %>%
slice(26:29) %>%
select(year, name) %>%
print()
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, year, sex) %>%
summarise(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
summarise(percent.male = sum(n) / total.per.year)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor")) %>%
group_by(name, year, sex) %>%
summarise(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
summarise(percent.male = sum(n) / total.per.year)
names_used <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie"))
library(tidyverse) #Loads the packages associated with the tidyverse
library(nycflights13) #Loads the nycflights dataset
#Calculates median wind speed of data by airport and direction for use in table and plot
median_wind_speed <- weather %>%
group_by(origin, wind_dir) %>%
select(origin, wind_dir, wind_speed) %>%
#Filters out large outlier in wind speed as well as data for which there is no wind direction specified
filter(wind_speed < 50, wind_dir != "NA", wind_dir != "0") %>%
summarise(Median.Wind.Speed = median(wind_speed, na.rm = TRUE)) %>%
rename(Wind.Direction = wind_dir, Origin = origin) %>%
print()
library(DT) #Loads the DT package which provides an R interface for the JavaScript library DataTables
#Creates a datatable of median wind speed data using the DT package
#This interactive datatable is only able to be seen when opening as an HTML file
datatable(median_wind_speed, class = "cell-border stripe", colnames = c("Airport", "Wind Direction", "Median Wind Speed (mph)"))
#Makes a plots of median wind speed as a function of wind direction by airport
wind_speed_plot <- ggplot(median_wind_speed, aes(Wind.Direction, Median.Wind.Speed, color = Median.Wind.Speed)) +
geom_point() +
facet_wrap(~Origin) +
labs(x = "Wind direction", y = "Median wind speed (mph)")
print(wind_speed_plot)
#Joins the flights and airlines datatables together so full airline names may be displayed
flights_and_airlines <- inner_join(flights, airlines, by = "carrier")
#Calculates the median distance of flights that leave from JFK by airline
median_dist_by_airline <- flights_and_airlines %>%
select(name, origin, distance) %>%
filter(origin == "JFK") %>%
group_by(name) %>%
summarise(Median.Distance = median(distance)) %>%
arrange(Median.Distance) %>%
print()
library(reshape2) #Loads the reshape2 package for transforming data format
#Calculates the number of flights that leave Newark each month by airline
num_flights_from_EWR <- flights_and_airlines %>%
select(name, origin, month) %>%
filter(origin == "EWR") %>%
group_by(month, name) %>%
summarise(Number.of.flights = length(name)) %>%
dcast(name ~ month) %>%
print()
library(babynames) #Loads the babynames dataset
#Determines the ten most common male baby names of 2014
male_names14 <- babynames %>%
filter(sex == "M", year == 2014) %>%
arrange(rev(n)) %>%
head(n = 10)
#Determines the ten most common female baby names of 2014
female_names14 <- babynames %>%
filter(sex == "F", year == 2014) %>%
arrange(rev(n)) %>%
head(n = 10)
#Joins the male and female most popular names of 2014
pop_names14 <- full_join(male_names14, female_names14)
#Plots the frequency of the ten most common male and female baby names of 2014 since 1800
top10_babyname_freq_plot <- semi_join(babynames, pop_names14, by = c("name", "sex")) %>%
ggplot(aes(year, prop, color = sex)) +
facet_wrap(~name) +
geom_point()
print(top10_babyname_freq_plot)
#Creates the table of common names as specified above
girl_names_26_29 <- babynames %>%
filter(year == c(1896, 1942, 2016)) %>%
group_by(year) %>%
arrange(rev(n)) %>%
slice(26:29) %>%
select(year, name) %>%
print()
names_used <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie"))
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie")) %>%
group_by(name, year) %>%
mutate(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
mutate(percent.male = (100 * n/total.per.year)) %>%
ggplot(aes(year, percent.male)) +
facet_wrap(~name) +
geom_point()
print(unisex_names_plot)
View(names_used)
names_used <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie"))
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie")) %>%
group_by(name, year) %>%
mutate(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
mutate(percent.male = (100 * n/total.per.year)) %>%
filter(percent.male != 100) %>%
ggplot(aes(year, percent.male)) +
facet_wrap(~name) +
geom_point()
print(unisex_names_plot)
names_used <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie"))
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie")) %>%
group_by(name, year) %>%
mutate(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
mutate(percent.male = (100 * n/total.per.year)) %>%
filter(percent.male != 100) %>% #Filters out data for years where data is only present for one sex
ggplot(aes(year, percent.male)) +
facet_wrap(~name) +
geom_point()
print(unisex_names_plot)
names_used <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie"))
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie")) %>%
group_by(name, year) %>%
mutate(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
mutate(percent.male = (100 * n/total.per.year)) %>%
filter(percent.male != 100) %>% #Filters out data for years where data is only present for one sex
ggplot(aes(year, percent.male)) +
facet_wrap(~name) +
geom_point() +
geom_smooth(method = lm)
print(unisex_names_plot)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie", "Robin")) %>%
group_by(name, year) %>%
mutate(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
mutate(percent.male = (100 * n/total.per.year)) %>%
filter(percent.male != 100) %>% #Filters out data for years where data is only present for one sex
ggplot(aes(year, percent.male)) +
facet_wrap(~name) +
geom_point() +
geom_smooth(method = lm)
print(unisex_names_plot)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie", "Robin", "Kim")) %>%
group_by(name, year) %>%
mutate(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
mutate(percent.male = (100 * n/total.per.year)) %>%
filter(percent.male != 100) %>% #Filters out data for years where data is only present for one sex
ggplot(aes(year, percent.male)) +
facet_wrap(~name) +
geom_point() +
geom_smooth(method = lm)
print(unisex_names_plot)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie", "Robin", "Sam")) %>%
group_by(name, year) %>%
mutate(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
mutate(percent.male = (100 * n/total.per.year)) %>%
filter(percent.male != 100) %>% #Filters out data for years where data is only present for one sex
ggplot(aes(year, percent.male)) +
facet_wrap(~name) +
geom_point() +
geom_smooth(method = lm)
print(unisex_names_plot)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie")) %>%
group_by(name, year) %>%
mutate(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
mutate(percent.male = (100 * n/total.per.year)) %>%
filter(percent.male != 100) %>% #Filters out data for years where data is only present for one sex
ggplot(aes(year, percent.male)) +
facet_wrap(~name) +
geom_point() +
geom_smooth(method = lm)
print(unisex_names_plot)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie", "Jamie")) %>%
group_by(name, year) %>%
mutate(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
mutate(percent.male = (100 * n/total.per.year)) %>%
filter(percent.male != 100) %>% #Filters out data for years where data is only present for one sex
ggplot(aes(year, percent.male)) +
facet_wrap(~name) +
geom_point() +
geom_smooth(method = lm)
print(unisex_names_plot)
#Creates a plot of the sex ratio of some unisex names over time
unisex_names_plot <- babynames %>%
filter(name == c("Jessie", "Taylor", "Jackie")) %>%
group_by(name, year) %>%
mutate(total.per.year = sum(n)) %>%
filter(sex == "M") %>%
mutate(percent.male = (100 * n/total.per.year)) %>%
filter(percent.male != 100) %>% #Filters out data for years where data is only present for one sex
ggplot(aes(year, percent.male)) +
facet_wrap(~name) +
geom_point() +
geom_smooth(method = lm)
print(unisex_names_plot)
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
add_columns <- (df, col1, col2){
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
add_columns <- function(df, col1, col2){
}
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
add_columns <- function(df, col1, col2){
if(is.data.frame(df) != TRUE)
error("The first argument is not a dataframe")
}
add_column(mtcars)
add_column(x)
add_column(1:3)
add_column(1)
add_column("vector")
add_columns("vector")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
add_columns <- function(df, col1, col2){
if(is.data.frame(df) != TRUE)
error("The first argument is not a dataframe")
}
add_columns()
add_columns(mtcars)
add_columns(1:3)
add_columns("no")
add_columns()
library(tidyverse) #Loads the packages associated with the tidyverse
vector <- c(1:3)
#Creates a function that adds two columns in a dataframe as specified above
add_columns <- function(df, col1, col2){
if(is.data.frame(df) != TRUE)
error("The first argument is not a dataframe")
}
vector
vector
str(vector)
library(tidyverse) #Loads the packages associated with the tidyverse
vector <- c(1:3)
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2){
if(is.data.frame(df) != TRUE)
error("The first argument is not a dataframe")
}
column_addition(vector)
column_addition(mtcars)
