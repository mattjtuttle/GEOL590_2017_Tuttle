}
return(adding.vector)
}
#Does the same thing as the sum() function using a for loop
my_sum <- function(vec){
adding.vector <- 0
for (num in vec){
adding.vector = adding.vector + num
}
return(adding.vector)
}
#Included to test code development
test2 <- my_sum(1:10^4)
test3 <- sum(1:10^4)
print(test2)
print(test3)
install.packages("microbenchmark")
#Does the same thing as the sum() function using a for loop
my_sum <- function(vec){
adding.vector <- 0
for (num in vec){
adding.vector = adding.vector + num
}
return(adding.vector)
}
#Compares the functions of sum() and my_sum()
test.vec <- 1:10^4
microbenchmark::microbenchmark(
my_sum(test.vec),
sum(test.vec)
)
#Included to test code development
test2 <- my_sum(1:10^4)
test3 <- sum(1:10^4)
print(test2)
print(test3)
#Does the same thing as the sum() function using a for loop
my_sum <- function(vec){
adding.vector <- 0
for (num in vec){
adding.vector = adding.vector + num
}
return(adding.vector)
}
#Compares the functions of sum() and my_sum()
test.vec <- 1:10^4
microbenchmark::microbenchmark(
my_sum(test.vec),
sum(test.vec)
)
#Included to test code development
test2 <- my_sum(1:10^4)
test3 <- sum(1:10^4)
print(test2)
print(test3)
test4 <- sum(1.5:200)
print(test4)
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(TRUE, error = warning("test error message"))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
tryCatch(
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE),
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(TRUE, error = warning("test error message"))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(is.data.frame(df) == TRUE, error = warning("test error message"))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE,
error = warning("One of the specified columns is not numeric."))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE,
error = warning("One of the specified columns is not numeric."))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(FALSE, error = warning("test error message"))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE)
warning("One of the specified columns is not numeric.")
tryCatch(FALSE, error = warning("test error message"))
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
?tryCatch
tryCatch(stop("fred"), finally = print("Hello"))
simple
tryCatch(stop("fred"), finally = print("Hello"))
tryCatch(stop(e), finally = print("Hello"))
stop(e)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
e <- simpleError("test error")
stop(e)
tryCatch(stop(e), finally = print("Hello"))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
is.integer(1)
is.integer(a)
is.double(a)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
tryCatch(if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE){
warning("One of the specified columns is not numeric."))
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
tryCatch(if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE){
warning("One of the specified columns is not numeric.")
}
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
tryCatch(if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE){
warning("One of the specified columns is not numeric.")
}
)
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
#Checks that both columns specified are numeric
#"[[]]" not "$" notation required for selecting column names as arguments
tryCatch(
if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE){
warning("One of the specified columns is not numeric.")
}
)
#Adds two columns and places the output in a new column within the existing dataframe
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values")
clear
exit
c
q
source('~/.active-rstudio-document')
View(test1)
?mutate
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(na_mtcars)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?tryCatch
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(na_mtcars)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(test2)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
mtcars
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(na_mtcars)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(na_mtcars)
View(test2)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
View(test1)
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
View(test1)
View(na_mtcars)
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
View(test2)
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
source('~/Projects/GEOL_590/R/trying_to_use_tryCatch.R')
library(tidyverse) #Loads the packages associated with the tidyverse
#Creates a function that adds two columns in a dataframe as specified above
column_addition <- function(df, col1, col2, name){
#Checks that the first argument is a dataframe
if(is.data.frame(df) != TRUE)
stop("The first argument is not a dataframe.")
#Checks that two valid columns were input as arguments for the function
`%!in%` <- function(x,y){!(`%in%`(x,y))} #Creates a "not in" operator
if(col1 %!in% colnames(df) | col2 %!in% colnames(df))
warning("One (or both) of the columns was not found in the specified dataframe.")
tryCatch(
#Adds two columns and places the output in a new column within the existing dataframe
{
add_col <- lazyeval::interp(~ a + b, a = as.name(col1), b = as.name(col2))
df %>% mutate_(.dots = setNames(list(add_col), name)) #Needed to use standard evaluation functions
},
#Checks that both columns specified are numeric. If not, returns NA
#"[[]]" not "$" notation required for selecting column names as argument
warning = if(is.numeric(df[[col1]]) != TRUE | is.numeric(df[[col2]]) != TRUE){
message("One of the specified columns is not numeric.")
na_col <- mutate_(df, .dots = setNames(list(NA), name))
return(na_col)
})
}
#Inculded to test code in development
test1 <- column_addition(mtcars, "mpg", "cyl", "added_values") #Checks normal adding
na_mtcars <- mutate(mtcars, new = NA)
test2 <- column_addition(na_mtcars, "mpg", "new", "added_values") #Checks adding when a column is "bad"
#Does the same thing as the sum() function using a for loop
my_sum <- function(vec){
adding.vector <- 0
for (num in vec){
adding.vector = adding.vector + num
}
return(adding.vector)
}
#Compares the functions of sum() and my_sum()
test.vec <- 1:10^4
microbenchmark::microbenchmark(
my_sum(test.vec),
sum(test.vec)
)
#Included to test code development
test2 <- my_sum(1:10^4)
test3 <- sum(1:10^4)
print(test2)
print(test3)
